import os, subprocess

def after_install(options, home_dir):
    def call(*args):
        retcode = subprocess.call(*args)
        if retcode:
            sys.stderr.write("Exit status %d from command args %s\n" % (retcode, args))
    	    sys.exit(retcode)

    call([join(home_dir, 'bin', 'easy_install'), 'virtualenv>=1.5.1'])
    call([join(home_dir, 'bin', 'easy_install'), '--upgrade', 'pip'])
    call([join(home_dir, 'bin', 'easy_install'), 'paver'])

    source_root = os.path.dirname(__file__)
    pavement_file = join(source_root, 'obadmin', 'obadmin', 'pavement.py')
    call([join(home_dir, 'bin', 'paver'), '-f', pavement_file,  'post_bootstrap'])

    # link source code
    if not os.path.abspath(source_root).startswith(os.path.abspath(home_dir)):
        source_link = join(home_dir, 'src', 'openblock')
        print "symlinking openblock source in %s to %s" % (source_root, source_link)
        copyfile(source_root, source_link, symlink=True)


def adjust_options(options, args):
    # Sanity-checking here b/c we want to do this early and
    # there's no more appropriate hook in a virtualenv bootstrap
    # script.
    import sys
    if not ((2, 6) <= sys.version_info[:2] < (3, 0)):
        raise RuntimeError("Incompatible Python version, we need Python >= 2.6"
                           " and less than 3.0.")
    # assume build in place unless otherwise specified
    if len(args) == 0:
        args[:] = ['./']

